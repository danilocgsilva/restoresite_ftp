#!/bin/bash

## 0. Check if utilities exists in in the system
if ! which ncftp > /dev/null 2>&1; then
    echo To the script work, you need first the ncftp available in the system.
    exit
fi

if ! which ask_mysql > /dev/null 2>&1; then
    echo If your site pack have a database backuped, you need the ask_mysql utility. Get it from https://raw.githubusercontent.com/danilocgsilva/ask_mysql/master/programfiles/ask_mysql.
    ask_mysql_exists=0
    echo -p "Press enter to continue..." nonusable
else
    ask_mysql_exists=1
    ask_mysql_source=$(which ask_mysql)
fi

## 1. Functions definitions

# ask()
# Asks something, fill variable and asks again if nothing provided
# $1: The question title.
# $2: The variable name.
# $3: The Title when the answer is not provided.
ask() {
    read -p "$1" $2
    if [[ -z ${!2} ]]; then
        echo "$3"
        ask "$1" $2 "$3"
        return
    fi
}

# ask_secret()
# Asks something, fill variable and asks again if nothing provided. Output not showed.
# $1: The question title.
# $2: The variable name.
# $3: The Title when the answer is not provided.
ask_secret() {
    read -s -p "$1" $2
    if [[ -z ${!2} ]]; then
        echo "$3"
        ask "$1" $2 "$3"
        return
    fi
}

# ask_file
# Asks something, fill variable, asks again if nothing provided and check if it is a file provided.
# $1: The question title.
# $2: The variable name.
# $3: The Title when the answer is not provided.
ask_file() {
    ask "$1" $2 "$3"
    if [ ! -f ${!2} ]; then
        echo The file provided \(${!2}\) does not exists!
        ask_file "$1" $2 "$3"
        return
    fi
}

# ask_tar
# Asks something, fill variable, asks again if nothing provided, check if it is a file and finally check if it is a tar file
ask_tar() {
    ask_file "$1" $2 "$3"
    file ${!2} | grep -i gzip > /dev/null
    # The parameter provided must be a gzip file
    if [ $? -ne 0 ]; then
        echo The provided file is not gzip!
        ask_tar "$1" $2 "$3"
    fi
}


## 2. Script
# 2.1 Make asks to fills the connections values
ask_tar "Please, provides the backup pack: " backup_pack "You did not provided nothing!"
ask "Provides the ftp server address: " ftp_server_address "You did not provided nothing as ftp server address."
ask "Please, provides the ftp server path: " ftp_server_site_path "You did not provided nothing as server path."
ask "Provides the ftp username: " ftp_username "You did not provides nothing!"
ask_secret "Finally, provides the ftp user password: " ftp_userpassword "You did provides nothing as password."


# 2.2 Actions post answers
date=$(date +%Y%m%d-%Hh%Mm%Ss)
tmp_folder=tmp-$date
mkdir $tmp_folder
echo Decompressing...
tar xzf $backup_pack -C $tmp_folder
cd $tmp_folder
# May always have one folder
decompressed_folder=$(ls | sed 1p)
cd $decompressed_folder
# The name of the local folder to be copied.
copyfoldertoftp=$(find . -maxdepth 1 -type d | cut -c 3-)
# Tries to restore database.
if [ $ask_mysql_exists -eq 1 ]; then
    if ls | grep -p ^db.sql$; then
        source $ask_mysql_source
        echo Restoring database...
        mysql -u$mysql_user -p$mysql_databasepassword -h$mysql_host $mysql_database << 'db.sql'
    fi
fi
ncftpput -R -v -p $ftp_userpassword -u $ftp_username $ftp_server_address $ftp_server_site_path $copyfoldertoftp

# echo ncftpput variables:
# echo User: $ftp_username
# echo Password: $ftp_userpassword
# echo Server address: $ftp_server_address
# echo Server path: $ftp_server_site_path
# echo Actual folder name: $copyfoldertoftp